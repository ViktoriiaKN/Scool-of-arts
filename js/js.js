// CALLBACK ФУНКЦІЇ
// Створимо функцію:
/* const numbers = [1, 2, 3, 4]; // Створили масив чисел

function add(arr) {
    let total = 0; // Ми створили акумулюючу змінну
    for (const value of arr) {
        total += value // Під час кожної ітерації додаємо до акумулюючої (збираючої) змінної
        // тотал ітерований елемент value
    }
    return total;
} // Функція буде додавати елементи масиву

add(numbers) / *//* / Викликаємо нашу функцію і передаємо туди масив */

// НАМ ПОТРІБНО СТВОРИТИ ДЕКІЛЬКА ФУНКЦІЙ: щоб додавали, віднімали, множили та ділили = нам буде потрібно
// копіювати усю функцію і змінювати лише оператор:
/* 
function sum(arr) {
    let total = 0;
    for (const value of arr) {
        total -= value
    }
    return total;
}

function foo(arr) {
    let total = 0;
    for (const value of arr) {
        total *= value
    }
    return total;
}

function result(arr) {
    let total = 0;
    for (const value of arr) {
        total /= value
    }
    return total;
}
 */
// Наш код дуже розтягнувся, тому ми шукаємо інший вихід:
const numbers = [1, 2, 3, 4];

// Створимо функцію, яка буде приймати той самий масив
function foo(arr, callback /* тут ми вказали, що приймаємо функцію колбека */) {
    // Створюємо акумулюючу змінну:
    let total = arr[0]/* беремо перший елемент масиву */
    // Створюємо цикл:
    for (let i = 1;/* Ми присвоїли 1 елемент [0] масиву акумулюючій змінній, тому 
    ітерація буде починатися з двієчки (2-го елементу) */ i < arr.length; i += 1) {
        total = callback (total, arr[i]) // Перевизначаємо змнну тотал, куди в параметри перекидаємо попередній тотал 
        // та поточний елемент ітерації arr[i]
    }
    return total; // повертаємо акумулюючу змінну після всіх дій
}

// Для того, щоб не дублювати самих себе ми створюємо функцію, яка буде додавати:
function add(a, b) {
    return a + b;
}

// і вона буде лише перебирати масив та акумулювати значення

    console.log(foo(numbers, add /* Ми передаємо посилання на функцію add в параметрах функції foo */));